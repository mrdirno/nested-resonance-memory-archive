# GitHub Actions CI/CD for Nested Resonance Memory Research
#
# Runs on: push, pull_request
# Jobs: lint, test, build-docker
#
# Author: Aldrin Payopay <aldrin.gdf@gmail.com>
# Repository: https://github.com/mrdirno/nested-resonance-memory-archive
# License: GPL-3.0

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black pylint
      
      - name: Run black (code formatting check)
        run: |
          black --check code/ papers/ || echo "::warning::Code formatting issues detected. Run 'make format' to fix."
        continue-on-error: true
      
      - name: Run pylint (code quality check)
        run: |
          pylint code/ --exit-zero || echo "::warning::Code quality issues detected."
        continue-on-error: true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Verify installation
        run: |
          python -c "import numpy, psutil, matplotlib; print('✓ Core dependencies OK')"
          python -c "import pandas, scipy; print('✓ Analysis dependencies OK')"
      
      - name: Run minimal package tests (overhead check)
        run: |
          cd papers/minimal_package_with_experiments/experiments
          python overhead_check.py --N 1080000 --C_ms 67 --T_sim_min 30 --noise 0.02 --trials 50

      - name: Run minimal package tests (pattern replication - healthy mode)
        run: |
          cd papers/minimal_package_with_experiments/experiments
          python replicate_patterns.py --runs 20 --threshold 0.99 --mode healthy

      - name: Run minimal package tests (pattern replication - degraded mode)
        run: |
          cd papers/minimal_package_with_experiments/experiments
          python replicate_patterns.py --runs 20 --threshold 0.99 --mode degraded
      
      - name: Run pytest (if tests exist)
        run: |
          pytest -v --maxfail=1 --disable-warnings || echo "::warning::No pytest tests configured yet"
        continue-on-error: true

      - name: Upload test outputs and artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-outputs-py${{ matrix.python-version }}
          path: |
            papers/minimal_package_with_experiments/experiments/*.json
            data/figures/*.png
            workspace/
          retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: nested-resonance-memory:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm nested-resonance-memory:test python -c "import numpy, psutil, matplotlib; print('✓ Docker image OK')"

  reproducibility:
    name: Reproducibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Check reproducibility guide exists
        run: |
          test -f REPRODUCIBILITY_GUIDE.md || exit 1
      
      - name: Check citation file exists
        run: |
          test -f CITATION.cff || exit 1
      
      - name: Check compiled papers exist
        run: |
          test -f papers/compiled/paper1/Paper1_Computational_Expense_Validation_arXiv_Submission.pdf || exit 1
          test -f papers/compiled/paper5d/Paper5D_Pattern_Mining_Framework_arXiv_Submission.pdf || exit 1

      - name: Validate PDF file sizes (embedded figures check)
        run: |
          echo "Validating PDF file sizes to ensure figures are embedded..."

          # Paper 1: Expected >= 1.5 MB (3 figures @ 300 DPI)
          SIZE_PAPER1=$(stat -c%s papers/compiled/paper1/Paper1_Computational_Expense_Validation_arXiv_Submission.pdf 2>/dev/null || stat -f%z papers/compiled/paper1/Paper1_Computational_Expense_Validation_arXiv_Submission.pdf)
          if [ "$SIZE_PAPER1" -lt 1500000 ]; then
            echo "::warning::Paper 1 PDF size $SIZE_PAPER1 bytes < 1.5 MB - figures may not be embedded"
          else
            echo "✓ Paper 1 PDF: $(echo "scale=2; $SIZE_PAPER1/1048576" | bc) MB (figures likely embedded)"
          fi

          # Paper 5D: Expected >= 900 KB (7 figures @ 300 DPI)
          SIZE_PAPER5D=$(stat -c%s papers/compiled/paper5d/Paper5D_Pattern_Mining_Framework_arXiv_Submission.pdf 2>/dev/null || stat -f%z papers/compiled/paper5d/Paper5D_Pattern_Mining_Framework_arXiv_Submission.pdf)
          if [ "$SIZE_PAPER5D" -lt 900000 ]; then
            echo "::warning::Paper 5D PDF size $SIZE_PAPER5D bytes < 900 KB - figures may not be embedded"
          else
            echo "✓ Paper 5D PDF: $(echo "scale=2; $SIZE_PAPER5D/1048576" | bc) MB (figures likely embedded)"
          fi

          # Paper 2: Expected >= 700 KB (4 figures @ 300 DPI) - known issue
          if [ -f papers/compiled/paper2/Paper2_Three_Regimes_arXiv_Submission.pdf ]; then
            SIZE_PAPER2=$(stat -c%s papers/compiled/paper2/Paper2_Three_Regimes_arXiv_Submission.pdf 2>/dev/null || stat -f%z papers/compiled/paper2/Paper2_Three_Regimes_arXiv_Submission.pdf)
            if [ "$SIZE_PAPER2" -lt 700000 ]; then
              echo "::warning::Paper 2 PDF size $SIZE_PAPER2 bytes < 700 KB - figures may not be embedded (known issue, see CYCLE605 audit)"
            else
              echo "✓ Paper 2 PDF: $(echo "scale=2; $SIZE_PAPER2/1048576" | bc) MB (figures likely embedded)"
            fi
          fi

          # Paper 6: Expected >= 1.5 MB (4 figures @ 300 DPI)
          if [ -f papers/compiled/paper6/Paper6_Scale_Dependent_Phase_Autonomy_arXiv_Submission.pdf ]; then
            SIZE_PAPER6=$(stat -c%s papers/compiled/paper6/Paper6_Scale_Dependent_Phase_Autonomy_arXiv_Submission.pdf 2>/dev/null || stat -f%z papers/compiled/paper6/Paper6_Scale_Dependent_Phase_Autonomy_arXiv_Submission.pdf)
            if [ "$SIZE_PAPER6" -lt 1500000 ]; then
              echo "::warning::Paper 6 PDF size $SIZE_PAPER6 bytes < 1.5 MB - figures may not be embedded"
            else
              echo "✓ Paper 6 PDF: $(echo "scale=2; $SIZE_PAPER6/1048576" | bc) MB (figures likely embedded)"
            fi
          fi

          # Paper 6B: Expected >= 900 KB (4 figures @ 300 DPI)
          if [ -f papers/compiled/paper6b/Paper6B_Multi_Timescale_Phase_Autonomy_arXiv_Submission.pdf ]; then
            SIZE_PAPER6B=$(stat -c%s papers/compiled/paper6b/Paper6B_Multi_Timescale_Phase_Autonomy_arXiv_Submission.pdf 2>/dev/null || stat -f%z papers/compiled/paper6b/Paper6B_Multi_Timescale_Phase_Autonomy_arXiv_Submission.pdf)
            if [ "$SIZE_PAPER6B" -lt 900000 ]; then
              echo "::warning::Paper 6B PDF size $SIZE_PAPER6B bytes < 900 KB - figures may not be embedded"
            else
              echo "✓ Paper 6B PDF: $(echo "scale=2; $SIZE_PAPER6B/1048576" | bc) MB (figures likely embedded)"
            fi
          fi

          # Paper 7: Expected >= 2.0 MB (4 figures @ 300 DPI) - known issue
          if [ -f papers/compiled/paper7/Paper7_Governing_Equations_arXiv_Submission.pdf ]; then
            SIZE_PAPER7=$(stat -c%s papers/compiled/paper7/Paper7_Governing_Equations_arXiv_Submission.pdf 2>/dev/null || stat -f%z papers/compiled/paper7/Paper7_Governing_Equations_arXiv_Submission.pdf)
            if [ "$SIZE_PAPER7" -lt 2000000 ]; then
              echo "::warning::Paper 7 PDF size $SIZE_PAPER7 bytes < 2.0 MB - figures may not be embedded (known issue, see CYCLE605 audit)"
            else
              echo "✓ Paper 7 PDF: $(echo "scale=2; $SIZE_PAPER7/1048576" | bc) MB (figures likely embedded)"
            fi
          fi

          echo "PDF file size validation complete"
        continue-on-error: true

      - name: Verify minimal package structure
        run: |
          test -d papers/minimal_package_with_experiments || exit 1
          test -f papers/minimal_package_with_experiments/experiments/overhead_check.py || exit 1
          test -f papers/minimal_package_with_experiments/experiments/replicate_patterns.py || exit 1
      
      - name: Print summary
        run: |
          echo "✓ Reproducibility artifacts verified"
          echo "✓ Papers compiled and accessible"
          echo "✓ Citation metadata present"
          echo "✓ Minimal package complete"

  arbiter:
    name: ARBITER Hash Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ARBITER validation
        run: |
          python code/arbiter/arbiter.py validate --strict
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Print ARBITER summary
        run: |
          echo "✓ ARBITER hash validation passed"
          echo "✓ Experimental artifacts verified deterministic"
          echo "✓ Phase 1 Gate 1.3 validation complete"

  overhead:
    name: Overhead Authentication (Gate 1.4)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run overhead authentication validation
        run: |
          python code/validation/overhead_authenticator.py validate --strict
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Print overhead authentication summary
        run: |
          echo "✓ Overhead authentication passed"
          echo "✓ ±5% reality grounding validated"
          echo "✓ Phase 1 Gate 1.4 validation complete"
